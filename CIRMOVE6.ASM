DATA SEGMENT
	
	XC	  DW 320 ; POS X DEL CENTRO
	YC    DW 240 ; POS Y DEL CENTRO

	XCI	  DW 320 ; POS X DEL CIRCULO SIN MOVIMIENTO
	YCI   DW 240 ; POS Y DEL CIRCULO SIN MOVIMIENTO

	PX    DW ?
	PY    DW ?

	RAD   DW 50 ; RADIO DEL CIRCULO
	RADV  DW ?
	
	COLOR DB 20   ; Color del circulo
	VID   DB ?	  ; Guarda el modo de video
	LAST  DB "1"

DATA ENDS

CODE SEGMENT
	ASSUME CS:CODE,DS:DATA,SS:PILA

INICIO:
	MOV AX,DATA
	MOV DS,AX
	
	MOV AH,0Fh	; Petición de obtención de modo de vídeo
	INT 10h		; Llamada al BIOS
	MOV VID,AL

	MOV AH,00h	; Función para establecer modo de video
	MOV AL,12h	; Modo gráfico resolución 640x480
	INT 10h	
	
	MOV AH,0Bh ; Cambiar el color del fondo de pantalla
	MOV BH,00
	MOV BL,23
	INT 10h
	
	CALL MAIN

	MOV AH,00h		; Función para re-establecer modo de texto
	MOV AL,VID		
	INT 10h		    ; Llamada al BIOS

	MOV AH,4Ch
	INT 21h

;------[PROCEDIMIENTOS]------

;---MAIN---		
	MAIN PROC NEAR

		PUSH XC
		PUSH YC

		BUCLE:
			MOV XC, 320
			MOV YC, 240
			
			MOV COLOR, 15
			CALL GRAFICAR

			POP YC
			POP XC

			MOV CX, RAD
			MOV COLOR, 20
			CALL GRAFICAR
			CALL ESCUCHAR
			JNZ ATENDER
			MOV AL, LAST


		ATENDER:
			CMP AL, "1"
			JNZ E2
			CALL MOVSWEST
			PUSH XC
			PUSH YC
			JMP BUCLE

		E2:	
			CMP AL, "2"
			JNZ E3
			CALL MOVSOUTH	
			
			PUSH XC
			PUSH YC
			JMP BUCLE
			
		E3:	
			CMP AL, "3"
			JNZ E4
			CALL MOVSEAST
			
			PUSH XC
			PUSH YC
			JMP BUCLE
			
		E4:	
			CMP AL, "4"
			JNZ E5
			CALL MOVWEST
			
			PUSH XC
			PUSH YC
			JMP BUCLE

		E5:	
			CMP AL, "5"
			JNZ E6
			CALL DONTMOVE

			PUSH XC
			PUSH YC
			JMP BUCLE
			
		E6:
			CMP AL, "6"
			JNZ E7
			CALL MOVEAST
			
			PUSH XC
			PUSH YC
			JMP BUCLE
			
		E7:	
			CMP AL, "7"
			JNZ E8
			CALL MOVNWEST	
			
			PUSH XC
			PUSH YC
			JMP BUCLE
			
		E8:	
			CMP AL, "8"
			JNZ E9
			CALL MOVNORTH	
			
			PUSH XC
			PUSH YC
			JMP BUCLE
			
		E9:	
			CMP AL, "9"
			JNZ QUIT
			CALL MOVNEAST
			
			PUSH XC
			PUSH YC
			JMP BUCLE
		
		QUIT:	
			CMP AL, "q"
			JNZ OTRO
			RET
		OTRO:
			PUSH XC
			PUSH YC
			JMP BUCLE
	MAIN ENDP

;---GRAFICAR---
	GRAFICAR PROC NEAR
		MOV CX, RAD 	;CX=RADIO
		MOV RADV, CX	;RADV=CX
		SUB CX, 1		;CX=CX-1 (CX=RADIO-1)
		
		PINTA:
			PUSH CX
			MOV PX,0
			MOV AX,RADV
			MOV PY,AX
			SIGUIENTEPX:
				CALL BUSCAR
				MOV AX,PY
				SUB AX,PX
				CMP AX,1
				JA SIGUIENTEPX
			DEC RADV
			POP CX
		LOOP PINTA
		RET
	GRAFICAR ENDP

;---BORRAR---
	BORRAR PROC NEAR
		; MOV COLOR,00
		; CALL GRAFICAR
		; RET
        MOV AH,0 
        MOV AL, 12h
        INT 10h
        
        MOV AH,0Bh ; Cambiar el color del fondo de pantalla
        MOV BH,00
        MOV BL,23
        INT 10h

        RET
	BORRAR ENDP

;---BUSCAR---
	BUSCAR PROC NEAR
		; Se encarga de buscar la coord del pixel sgte.
		
		MOV AX,PX ; AX almacena la COORDENADA X 	
		MUL AX    ; AX almacena X^2=X*X
		MOV BX,AX ; X^2 se almacena en BX

		MOV AX,PY ; AX almacena la COORDENADA Y
		MUL AX    ; AX almacena Y^2
		ADD BX,AX ; BX almacena X^2+Y^2

		MOV AX,RAD; AX almacena el RADIO (R)
		MUL AX    ; AX almacena R^2 (AX=AX*AX)

		SUB AX,BX ; AX almacena R^2-(X^2+Y^2)
		
		;Almacenamos el valor de AX en CX 
		;para una posterior comparación
		MOV CX,AX ;CX ACTUA COMO TEMPORAL
		
		MOV AX,PX ; AX almacena la COORDENADA X
		MUL AX    ; AX almacena  X^2=X*X
		MOV BX,AX ; BX almacena X^2

		MOV AX,PY ; AX almacena la COORDENADA Y
		DEC AX    ; una unidad menos para Y
		MUL AX    ; AX almacena Y^2
		ADD BX,AX ; BX almacena X^2 + Y^2

		MOV AX,RAD; AX almacena el RADIO (R)
		MUL AX    ; AX almacena R^2
		SUB AX,BX ; AX almacena R^2 - (X^2+Y^2)
		
		CMP CX,AX ;COMPARA LOS DOS RESULTADOS ANTERIORES
        JBE NODEC  ;Y EJECUTA NODEC SOLO SI EL PRIMERO ES MENOR AL SEGUNDO

        INC PX ; Horizontalmente siempre aumenta 1
		DEC PY ; Verticalmente disminuye 1
        RET
	NODEC:
		CALL REPUNTEAR
        INC PX ; Horizontalmente siempre aumenta 1
		RET
    ASD:
        RET
	BUSCAR ENDP

;---REPUNTEAR---
	REPUNTEAR PROC NEAR 
	
	;UBICA LAS COORDENADAS EN LOS DISTINTOS CUADRANTES 
	;Y DIBUJA UN PUNTO EN CADA CUADRANTE, 
	;EL PROCESO SE REPITE DOS VECES 
	;INTERCAMBIANDO COORDENADAS PARA 
	;QUE SE PINTEN TODOS LOS PUNTOS DE LOS CUADRANTES

		MOV CX,XC
		ADD CX,PX
		MOV DX,YC
		SUB DX,PY 
		CALL PUNTO

		MOV DX,YC
		ADD DX,PY
		CALL PUNTO

		MOV CX,XC
		SUB CX,PX
		CALL PUNTO

		MOV DX,YC
		SUB DX,PY
		CALL PUNTO

		MOV CX,XC
		ADD CX,PY
		MOV DX,YC
		SUB DX,PX 
		CALL PUNTO

		MOV DX,YC
		ADD DX,PX
		CALL PUNTO

		MOV CX,XC
		SUB CX,PY
		CALL PUNTO

		MOV DX,YC
		SUB DX,PX
		CALL PUNTO

		RET
	REPUNTEAR ENDP

;---PUNTO---
	PUNTO PROC NEAR
		PUSH CX
		PUSH DX
	; DEBIDO A QUE EN LA SIGUIENTE PARTE SE USARAN LOS REGISTROS CX Y DX LOS MANDAMOS A LA PILA PARA GUARDARLOS, LOS RECUPERAMOS LUEGO CON LA INSTRUCCION POP AL FINAL DEL PROCEDIMIENTO
		; SI EL COLOR ES BLANCO SOLO LO DIBUJA, NO CAMBIA DE COLOR
		CMP COLOR, 15
		JZ NP6
		
        MOV AX, CX ; ASIGNA A AX LA POSICION CX QUE ES LA COORDENADA X DEL PUNTO 
		CMP AX, XCI ; COMPARA AX CON 32O, SI ES MAYOR RESTA AX - 320, SI NO ES 320 - AX
		JA RES
		MOV CX, XCI
		SUB CX, AX
		MOV AX, CX
		JMP CONT2
		RES:
		SUB AX, XCI
		CONT2:
		MOV CX, DX ; DEBIDO A QUE LA MULTIPLICACION USA EL REGISTRO AX, Y ESTE CONTIENE LA COORDENADA Y, SE ASIGNA DX A CX PARA QUE LA COORDENADA NO SE PIERDA
        MUL AX ; SE ENCUENTRA X^2
        MOV BX, AX ; ASIGNA A BX X ^2

		MOV AX, CX ; AHORA MUEVE LA COORDENADA Y PREVIAMENTE GUARDADA EN CX A AX
		CMP AX, YCI ; COMPARA AX CON 32O, SI ES MAYOR RESTA AX - 240, SI NO ES 240 - AX
		JA RES1
		MOV CX, YCI
		SUB CX, AX
		MOV AX, CX
		JMP CONT1
		RES1:
		SUB AX, YCI
        CONT1:
		MUL AX
        ADD BX, AX ; AÑADE Y ^2 A BX Y EN BX SE GUARDA X^2 + Y^2 (RESPECTO AL CENTRO DEL CIRCULO ESTÁTICO)

		MOV AX, RAD ; ASIGNA EL VALOR DEL RADIO A AX
		MUL AX ; ASIGNA EL VALOR DE R^2 A AX 

		CMP AX, BX ; compara R^2 con (X^2 + Y^2)
		JB NP6 ; SI R^2 ES MENOR, SIGNIFICA QUE LOS PUNTOS SE ENCUENTRAN POR FUERA DEL CÍRCULO, ENTONCES SOLO EJECUTA  LA FUNCION PUNTO CON EL MISMO COLOR
		
		MOV COLOR, 5 ; SI NO, SI ES MENOR, ASIGNA A COLOR EL COLOR VIOLETA (5)

		NP6: ; DEVUELVE SUS VALORES A DX Y CX Y ESCRIBE EL PUNTO EN LA POSICION ESTABLECIDA
		POP DX
		POP CX
		MOV AH,0Ch		; peticion para escribir un punto
		MOV AL,COLOR	; color pixel
		MOV BH,0h		; pagina
		INT 10h			; Llama al BIOS
        CMP COLOR, 5 ; VERIFICA SI EL COLOR USADO FUE EL VIOLETA
        JZ NP7 ; SI ES ASI, DEVUELVE EL COLOR A SU ESTADO ORIGINAL (EN ESTE CASO EL 20 QUE ES EL ROJO)
        RET

        NP7:
        MOV COLOR, 20
        RET
        
	PUNTO ENDP

;---MOVIMIENTOS
	MOVSWEST PROC NEAR
		MOV AX,XC
		SUB AX,RAD
		JNZ NO1
		CALL MOVSEAST
		RET
	NO1:
		MOV AX,YC
		ADD AX,RAD
		SUB AX,480
		JNZ	NO2
		CALL MOVNWEST
		RET
	NO2:
		CALL BORRAR
		ADD YC, 10
		SUB XC, 10
		MOV LAST,"1"
		RET
	MOVSWEST ENDP

	MOVSOUTH PROC NEAR
		MOV AX,YC
		ADD AX,RAD
		SUB AX,480
		JNZ NO3
		CALL MOVNORTH
		RET
	NO3:
		CALL BORRAR
		ADD YC, 10
		MOV LAST,"2"
		RET
	MOVSOUTH ENDP

	MOVSEAST PROC NEAR
		MOV AX,YC
		ADD AX,RAD
		SUB AX,480
		JNZ NO4
		CALL MOVNEAST
		RET
	NO4:
		MOV AX,XC
		ADD AX,RAD
		SUB AX,640
		JNZ NO5
		CALL MOVSWEST
		RET
	NO5:
		CALL BORRAR
		ADD YC, 10
		ADD XC, 10
		MOV LAST,"3"
		RET
	MOVSEAST ENDP

	MOVWEST PROC NEAR
		MOV AX,XC
		SUB AX,RAD
		JNZ NO6
		CALL MOVEAST
		RET
	NO6:
		CALL BORRAR
		SUB XC, 10
		MOV LAST,"4"
		RET
	MOVWEST ENDP

	MOVEAST PROC NEAR
		MOV AX,XC
		ADD AX,RAD
		SUB AX,640
		JNZ NO7
		CALL MOVWEST
		RET
	NO7:
		CALL BORRAR
		ADD XC, 10
		MOV LAST,"6"
		RET
	MOVEAST ENDP

	MOVNWEST PROC NEAR
		MOV AX,XC
		SUB AX,RAD
		JNZ NO8
		CALL MOVNEAST
		RET
	NO8:
		MOV AX,YC
		SUB AX,RAD
		JNZ NO9
		CALL MOVSWEST
		RET
	NO9:
		CALL BORRAR
		SUB YC, 10
		SUB XC, 10
		MOV LAST,"7"
		RET
	MOVNWEST ENDP

	MOVNORTH PROC NEAR
		MOV AX,YC
		SUB AX,RAD
		JNZ NO10
		CALL MOVSOUTH
		RET
	NO10:
		CALL BORRAR
		SUB YC, 10
		MOV LAST,"8"
		RET
	MOVNORTH ENDP

	MOVNEAST PROC NEAR
		MOV AX,XC
		ADD AX,RAD
		SUB AX,640
		JNZ NO11
		CALL MOVNWEST
		RET
	NO11:
		MOV AX,YC
		SUB AX,RAD
		JNZ NO12
		CALL MOVSEAST
		RET
	NO12:
		CALL BORRAR
		SUB YC, 10
		ADD XC, 10
		MOV LAST,"9"
		RET
	MOVNEAST ENDP

	DONTMOVE PROC NEAR
		; CALL GRAFICAR
		MOV AH,00h
		INT 16h
		; Si deseamos que parpadee, eliminamos las 3 de arriba.
		MOV LAST,AL
		RET
	DONTMOVE ENDP

;---ESCUCHAR---
	ESCUCHAR PROC NEAR
		MOV AH,06h     ; Peticion directa a la consola
	 	MOV DL,0FFh    ; Entrada de teclado
	 	INT 21h        ; Interrupcion que llama al DOS
		; Si ZF está prendido quiere decir que el buffer está vacío.
		RET
		; En AL queda el ASCII del caracter ingresado.
	ESCUCHAR ENDP

CODE ENDS

PILA SEGMENT STACK
    DB 9FFF DUP(50)
PILA ENDS

END INICIO
